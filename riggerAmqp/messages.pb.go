// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: riggerAmqp/messages.proto

package riggerAmqp

import (
	fmt "fmt"
	actor "github.com/AsynkronIT/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ConnectConfig struct {
	Tag      string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Host     string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port     int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	User     string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *ConnectConfig) Reset()      { *m = ConnectConfig{} }
func (*ConnectConfig) ProtoMessage() {}
func (*ConnectConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c64aaac26d3b36e, []int{0}
}
func (m *ConnectConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectConfig.Merge(m, src)
}
func (m *ConnectConfig) XXX_Size() int {
	return m.Size()
}
func (m *ConnectConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectConfig proto.InternalMessageInfo

func (m *ConnectConfig) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ConnectConfig) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ConnectConfig) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ConnectConfig) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ConnectConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Connection struct {
	Tag string     `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Pid *actor.PID `protobuf:"bytes,2,opt,name=Pid,proto3" json:"Pid,omitempty"`
}

func (m *Connection) Reset()      { *m = Connection{} }
func (*Connection) ProtoMessage() {}
func (*Connection) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c64aaac26d3b36e, []int{1}
}
func (m *Connection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Connection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Connection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Connection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Connection.Merge(m, src)
}
func (m *Connection) XXX_Size() int {
	return m.Size()
}
func (m *Connection) XXX_DiscardUnknown() {
	xxx_messageInfo_Connection.DiscardUnknown(m)
}

var xxx_messageInfo_Connection proto.InternalMessageInfo

func (m *Connection) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Connection) GetPid() *actor.PID {
	if m != nil {
		return m.Pid
	}
	return nil
}

type Channel struct {
	Pid *actor.PID `protobuf:"bytes,1,opt,name=Pid,proto3" json:"Pid,omitempty"`
}

func (m *Channel) Reset()      { *m = Channel{} }
func (*Channel) ProtoMessage() {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c64aaac26d3b36e, []int{2}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(m, src)
}
func (m *Channel) XXX_Size() int {
	return m.Size()
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetPid() *actor.PID {
	if m != nil {
		return m.Pid
	}
	return nil
}

type ConnectResp struct {
	Error string      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Conn  *Connection `protobuf:"bytes,2,opt,name=conn,proto3" json:"conn,omitempty"`
}

func (m *ConnectResp) Reset()      { *m = ConnectResp{} }
func (*ConnectResp) ProtoMessage() {}
func (*ConnectResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c64aaac26d3b36e, []int{3}
}
func (m *ConnectResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectResp.Merge(m, src)
}
func (m *ConnectResp) XXX_Size() int {
	return m.Size()
}
func (m *ConnectResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectResp.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectResp proto.InternalMessageInfo

func (m *ConnectResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ConnectResp) GetConn() *Connection {
	if m != nil {
		return m.Conn
	}
	return nil
}

// 打开频道
type OpenChannel struct {
}

func (m *OpenChannel) Reset()      { *m = OpenChannel{} }
func (*OpenChannel) ProtoMessage() {}
func (*OpenChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c64aaac26d3b36e, []int{4}
}
func (m *OpenChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenChannel.Merge(m, src)
}
func (m *OpenChannel) XXX_Size() int {
	return m.Size()
}
func (m *OpenChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenChannel.DiscardUnknown(m)
}

var xxx_messageInfo_OpenChannel proto.InternalMessageInfo

type OpenChannelResp struct {
	Error   string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Channel *Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *OpenChannelResp) Reset()      { *m = OpenChannelResp{} }
func (*OpenChannelResp) ProtoMessage() {}
func (*OpenChannelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c64aaac26d3b36e, []int{5}
}
func (m *OpenChannelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenChannelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenChannelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenChannelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenChannelResp.Merge(m, src)
}
func (m *OpenChannelResp) XXX_Size() int {
	return m.Size()
}
func (m *OpenChannelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenChannelResp.DiscardUnknown(m)
}

var xxx_messageInfo_OpenChannelResp proto.InternalMessageInfo

func (m *OpenChannelResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *OpenChannelResp) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type CancelConsume struct {
	Consumer string `protobuf:"bytes,1,opt,name=consumer,proto3" json:"consumer,omitempty"`
	NoWait   bool   `protobuf:"varint,2,opt,name=noWait,proto3" json:"noWait,omitempty"`
}

func (m *CancelConsume) Reset()      { *m = CancelConsume{} }
func (*CancelConsume) ProtoMessage() {}
func (*CancelConsume) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c64aaac26d3b36e, []int{6}
}
func (m *CancelConsume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelConsume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelConsume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelConsume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelConsume.Merge(m, src)
}
func (m *CancelConsume) XXX_Size() int {
	return m.Size()
}
func (m *CancelConsume) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelConsume.DiscardUnknown(m)
}

var xxx_messageInfo_CancelConsume proto.InternalMessageInfo

func (m *CancelConsume) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

func (m *CancelConsume) GetNoWait() bool {
	if m != nil {
		return m.NoWait
	}
	return false
}

type QueueInspection struct {
	Error     string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Messages  int32  `protobuf:"varint,3,opt,name=messages,proto3" json:"messages,omitempty"`
	Consumers int32  `protobuf:"varint,4,opt,name=consumers,proto3" json:"consumers,omitempty"`
}

func (m *QueueInspection) Reset()      { *m = QueueInspection{} }
func (*QueueInspection) ProtoMessage() {}
func (*QueueInspection) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c64aaac26d3b36e, []int{7}
}
func (m *QueueInspection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueInspection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueInspection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueInspection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueInspection.Merge(m, src)
}
func (m *QueueInspection) XXX_Size() int {
	return m.Size()
}
func (m *QueueInspection) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueInspection.DiscardUnknown(m)
}

var xxx_messageInfo_QueueInspection proto.InternalMessageInfo

func (m *QueueInspection) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *QueueInspection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueueInspection) GetMessages() int32 {
	if m != nil {
		return m.Messages
	}
	return 0
}

func (m *QueueInspection) GetConsumers() int32 {
	if m != nil {
		return m.Consumers
	}
	return 0
}

type QueueDeleteResp struct {
	Error  string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Purged int32  `protobuf:"varint,2,opt,name=purged,proto3" json:"purged,omitempty"`
}

func (m *QueueDeleteResp) Reset()      { *m = QueueDeleteResp{} }
func (*QueueDeleteResp) ProtoMessage() {}
func (*QueueDeleteResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c64aaac26d3b36e, []int{8}
}
func (m *QueueDeleteResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueDeleteResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueDeleteResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueDeleteResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueDeleteResp.Merge(m, src)
}
func (m *QueueDeleteResp) XXX_Size() int {
	return m.Size()
}
func (m *QueueDeleteResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueDeleteResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueueDeleteResp proto.InternalMessageInfo

func (m *QueueDeleteResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *QueueDeleteResp) GetPurged() int32 {
	if m != nil {
		return m.Purged
	}
	return 0
}

func init() {
	proto.RegisterType((*ConnectConfig)(nil), "riggerAmqp.connectConfig")
	proto.RegisterType((*Connection)(nil), "riggerAmqp.connection")
	proto.RegisterType((*Channel)(nil), "riggerAmqp.channel")
	proto.RegisterType((*ConnectResp)(nil), "riggerAmqp.connectResp")
	proto.RegisterType((*OpenChannel)(nil), "riggerAmqp.openChannel")
	proto.RegisterType((*OpenChannelResp)(nil), "riggerAmqp.openChannelResp")
	proto.RegisterType((*CancelConsume)(nil), "riggerAmqp.cancelConsume")
	proto.RegisterType((*QueueInspection)(nil), "riggerAmqp.queueInspection")
	proto.RegisterType((*QueueDeleteResp)(nil), "riggerAmqp.queueDeleteResp")
}

func init() { proto.RegisterFile("riggerAmqp/messages.proto", fileDescriptor_2c64aaac26d3b36e) }

var fileDescriptor_2c64aaac26d3b36e = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xbd, 0x24, 0x0e, 0xed, 0x44, 0x51, 0xd1, 0x82, 0x22, 0x53, 0x55, 0xab, 0xca, 0x17,
	0x2a, 0xa4, 0x3a, 0x12, 0x20, 0x4e, 0x48, 0xa8, 0xa4, 0x97, 0x9c, 0x40, 0x16, 0x82, 0xb3, 0xeb,
	0x0e, 0x8e, 0x45, 0xbc, 0xbb, 0xdd, 0x5d, 0x0b, 0xf5, 0xc6, 0x23, 0xf0, 0x18, 0x3c, 0x0a, 0xc7,
	0x1c, 0x7b, 0x24, 0xce, 0x85, 0x63, 0x1f, 0x01, 0xed, 0x7a, 0x9d, 0x80, 0x14, 0xe5, 0xf6, 0xff,
	0x7f, 0xfe, 0xf8, 0x1b, 0xcd, 0x2c, 0x3c, 0x55, 0x65, 0x51, 0xa0, 0xba, 0xa8, 0x6e, 0xe4, 0xa4,
	0x42, 0xad, 0xb3, 0x02, 0x75, 0x22, 0x95, 0x30, 0x82, 0xc2, 0xf6, 0xa7, 0xe3, 0xd7, 0x45, 0x69,
	0xe6, 0xf5, 0x55, 0x92, 0x8b, 0x6a, 0x72, 0xa1, 0x6f, 0xf9, 0x57, 0x25, 0xf8, 0xec, 0xe3, 0xc4,
	0x15, 0xb3, 0xdc, 0x08, 0x75, 0x5e, 0x88, 0x89, 0x13, 0x6d, 0xe6, 0xbf, 0x11, 0xdf, 0xc2, 0x28,
	0x17, 0x9c, 0x63, 0x6e, 0xa6, 0x82, 0x7f, 0x29, 0x0b, 0xfa, 0x08, 0x7a, 0x26, 0x2b, 0x22, 0x72,
	0x4a, 0xce, 0x0e, 0x53, 0x2b, 0x29, 0x85, 0xfe, 0x5c, 0x68, 0x13, 0x3d, 0x70, 0x91, 0xd3, 0x36,
	0x93, 0x42, 0x99, 0xa8, 0x77, 0x4a, 0xce, 0xc2, 0xd4, 0x69, 0x9b, 0xd5, 0x1a, 0x55, 0xd4, 0x6f,
	0x7b, 0x56, 0xd3, 0x63, 0x38, 0x90, 0x99, 0xd6, 0xdf, 0x84, 0xba, 0x8e, 0x42, 0x97, 0x6f, 0x7c,
	0xfc, 0x06, 0xc0, 0xa3, 0x4b, 0xc1, 0x77, 0x70, 0x4f, 0xa0, 0x27, 0xcb, 0x6b, 0x87, 0x1d, 0xbe,
	0x80, 0xc4, 0x0d, 0x9f, 0x7c, 0x98, 0x5d, 0xa6, 0x36, 0x8e, 0x9f, 0xc1, 0xc3, 0x7c, 0x9e, 0x71,
	0x8e, 0x8b, 0xae, 0x48, 0x76, 0x17, 0xdf, 0xc3, 0xd0, 0x63, 0x52, 0xd4, 0x92, 0x3e, 0x81, 0x10,
	0x95, 0x12, 0xca, 0x93, 0x5a, 0x43, 0x9f, 0x43, 0xdf, 0x96, 0x3c, 0x6c, 0x9c, 0x6c, 0x37, 0x9b,
	0x6c, 0x67, 0x4c, 0x5d, 0x27, 0x1e, 0xc1, 0x50, 0x48, 0xe4, 0xd3, 0x96, 0x1e, 0x7f, 0x82, 0xa3,
	0x7f, 0xec, 0x1e, 0xc6, 0xf9, 0x66, 0x62, 0x8f, 0x79, 0xfc, 0x1f, 0xc6, 0xff, 0xbf, 0xeb, 0xc4,
	0x53, 0x18, 0xe5, 0x19, 0xcf, 0x71, 0x31, 0x15, 0x5c, 0xd7, 0x15, 0xda, 0x5d, 0xe6, 0xad, 0xec,
	0x3e, 0xbc, 0xf1, 0x74, 0x0c, 0x03, 0x2e, 0x3e, 0x67, 0x65, 0x7b, 0xa5, 0x83, 0xd4, 0xbb, 0xb8,
	0x86, 0xa3, 0x9b, 0x1a, 0x6b, 0x9c, 0x71, 0x2d, 0xfd, 0xa2, 0x77, 0x0f, 0x47, 0xa1, 0xcf, 0xb3,
	0x0a, 0xbb, 0x23, 0x5b, 0x6d, 0x81, 0xdd, 0x8b, 0xf3, 0x87, 0xde, 0x78, 0x7a, 0x02, 0x87, 0x1d,
	0x5c, 0xbb, 0x8b, 0x87, 0xe9, 0x36, 0x88, 0xdf, 0x7a, 0xec, 0x25, 0x2e, 0xd0, 0xe0, 0x9e, 0x9d,
	0x8c, 0x61, 0x20, 0x6b, 0x55, 0x60, 0x7b, 0xe6, 0x30, 0xf5, 0xee, 0xdd, 0xab, 0xe5, 0x8a, 0x05,
	0x77, 0x2b, 0x16, 0xdc, 0xaf, 0x18, 0xf9, 0xde, 0x30, 0xf2, 0xb3, 0x61, 0xe4, 0x57, 0xc3, 0xc8,
	0xb2, 0x61, 0xe4, 0x77, 0xc3, 0xc8, 0x9f, 0x86, 0x05, 0xf7, 0x0d, 0x23, 0x3f, 0xd6, 0x2c, 0x58,
	0xae, 0x59, 0x70, 0xb7, 0x66, 0xc1, 0xd5, 0xc0, 0xbd, 0xe9, 0x97, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xdc, 0xd9, 0x53, 0x50, 0x34, 0x03, 0x00, 0x00,
}

func (this *ConnectConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectConfig)
	if !ok {
		that2, ok := that.(ConnectConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *Connection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Connection)
	if !ok {
		that2, ok := that.(Connection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if !this.Pid.Equal(that1.Pid) {
		return false
	}
	return true
}
func (this *Channel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Channel)
	if !ok {
		that2, ok := that.(Channel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pid.Equal(that1.Pid) {
		return false
	}
	return true
}
func (this *ConnectResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConnectResp)
	if !ok {
		that2, ok := that.(ConnectResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if !this.Conn.Equal(that1.Conn) {
		return false
	}
	return true
}
func (this *OpenChannel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenChannel)
	if !ok {
		that2, ok := that.(OpenChannel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *OpenChannelResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OpenChannelResp)
	if !ok {
		that2, ok := that.(OpenChannelResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if !this.Channel.Equal(that1.Channel) {
		return false
	}
	return true
}
func (this *CancelConsume) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CancelConsume)
	if !ok {
		that2, ok := that.(CancelConsume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Consumer != that1.Consumer {
		return false
	}
	if this.NoWait != that1.NoWait {
		return false
	}
	return true
}
func (this *QueueInspection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueueInspection)
	if !ok {
		that2, ok := that.(QueueInspection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Messages != that1.Messages {
		return false
	}
	if this.Consumers != that1.Consumers {
		return false
	}
	return true
}
func (this *QueueDeleteResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueueDeleteResp)
	if !ok {
		that2, ok := that.(QueueDeleteResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Purged != that1.Purged {
		return false
	}
	return true
}
func (this *ConnectConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&riggerAmqp.ConnectConfig{")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	s = append(s, "Host: "+fmt.Sprintf("%#v", this.Host)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "Password: "+fmt.Sprintf("%#v", this.Password)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Connection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&riggerAmqp.Connection{")
	s = append(s, "Tag: "+fmt.Sprintf("%#v", this.Tag)+",\n")
	if this.Pid != nil {
		s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Channel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&riggerAmqp.Channel{")
	if this.Pid != nil {
		s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConnectResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&riggerAmqp.ConnectResp{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	if this.Conn != nil {
		s = append(s, "Conn: "+fmt.Sprintf("%#v", this.Conn)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenChannel) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&riggerAmqp.OpenChannel{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OpenChannelResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&riggerAmqp.OpenChannelResp{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	if this.Channel != nil {
		s = append(s, "Channel: "+fmt.Sprintf("%#v", this.Channel)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CancelConsume) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&riggerAmqp.CancelConsume{")
	s = append(s, "Consumer: "+fmt.Sprintf("%#v", this.Consumer)+",\n")
	s = append(s, "NoWait: "+fmt.Sprintf("%#v", this.NoWait)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueueInspection) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&riggerAmqp.QueueInspection{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	s = append(s, "Consumers: "+fmt.Sprintf("%#v", this.Consumers)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueueDeleteResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&riggerAmqp.QueueDeleteResp{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "Purged: "+fmt.Sprintf("%#v", this.Purged)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessages(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ConnectConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.Port != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Port))
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *Connection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Connection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if m.Pid != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Pid.Size()))
		n1, err := m.Pid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Pid.Size()))
		n2, err := m.Pid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ConnectResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Conn != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Conn.Size()))
		n3, err := m.Conn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *OpenChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenChannel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *OpenChannelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenChannelResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Channel != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Channel.Size()))
		n4, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *CancelConsume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelConsume) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Consumer) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Consumer)))
		i += copy(dAtA[i:], m.Consumer)
	}
	if m.NoWait {
		dAtA[i] = 0x10
		i++
		if m.NoWait {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *QueueInspection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueInspection) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Messages != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Messages))
	}
	if m.Consumers != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Consumers))
	}
	return i, nil
}

func (m *QueueDeleteResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueDeleteResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Purged != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessages(dAtA, i, uint64(m.Purged))
	}
	return i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConnectConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovMessages(uint64(m.Port))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *Connection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Pid != nil {
		l = m.Pid.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *Channel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != nil {
		l = m.Pid.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *ConnectResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Conn != nil {
		l = m.Conn.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *OpenChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OpenChannelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *CancelConsume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Consumer)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.NoWait {
		n += 2
	}
	return n
}

func (m *QueueInspection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Messages != 0 {
		n += 1 + sovMessages(uint64(m.Messages))
	}
	if m.Consumers != 0 {
		n += 1 + sovMessages(uint64(m.Consumers))
	}
	return n
}

func (m *QueueDeleteResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Purged != 0 {
		n += 1 + sovMessages(uint64(m.Purged))
	}
	return n
}

func sovMessages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ConnectConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectConfig{`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Connection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Connection{`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Pid:` + strings.Replace(fmt.Sprintf("%v", this.Pid), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Channel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Channel{`,
		`Pid:` + strings.Replace(fmt.Sprintf("%v", this.Pid), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConnectResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConnectResp{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Conn:` + strings.Replace(fmt.Sprintf("%v", this.Conn), "Connection", "Connection", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OpenChannel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenChannel{`,
		`}`,
	}, "")
	return s
}
func (this *OpenChannelResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OpenChannelResp{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Channel:` + strings.Replace(fmt.Sprintf("%v", this.Channel), "Channel", "Channel", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CancelConsume) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CancelConsume{`,
		`Consumer:` + fmt.Sprintf("%v", this.Consumer) + `,`,
		`NoWait:` + fmt.Sprintf("%v", this.NoWait) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueueInspection) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueInspection{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Messages:` + fmt.Sprintf("%v", this.Messages) + `,`,
		`Consumers:` + fmt.Sprintf("%v", this.Consumers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueueDeleteResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueDeleteResp{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Purged:` + fmt.Sprintf("%v", this.Purged) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ConnectConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: connectConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: connectConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Connection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: connection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: connection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pid == nil {
				m.Pid = &actor.PID{}
			}
			if err := m.Pid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pid == nil {
				m.Pid = &actor.PID{}
			}
			if err := m.Pid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: connectResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: connectResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conn == nil {
				m.Conn = &Connection{}
			}
			if err := m.Conn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: openChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: openChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenChannelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: openChannelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: openChannelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelConsume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: cancelConsume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: cancelConsume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consumer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWait = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueInspection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: queueInspection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: queueInspection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			m.Messages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Messages |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumers", wireType)
			}
			m.Consumers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Consumers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueDeleteResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: queueDeleteResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: queueDeleteResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purged", wireType)
			}
			m.Purged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Purged |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMessages
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessages
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessages(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMessages
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessages = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages   = fmt.Errorf("proto: integer overflow")
)
